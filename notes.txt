Auto pip8 - autopep8 -a -a -I file_name.py
node module .ignore
text file documentation

Design data intensive application
Clean architecture

Course Topics:
APIs: What, Why, How
Handling HTTP Requests
Routing and API Endpoints
Documentation
Testing

Technologies
Flask
Flask-CORS
SQLAlchemy
JSONify
Unittest

Lesson Overview: Introduction to APIs
Before you start development, you should conceptually understand what you're doing. In this first lesson, you'll gain that foundational knowledge. Here's what we'll go over:

What are APIs?
Benefits of APIs
IP Communication
RESTful APIs

API- Application Programming Interface. An API is an interface. It's something that has been created to help two different systems interact with one another.

API. This has multiple benefits:

It doesn't expose the implementation to those who shouldn't have access to it
The API provides a standard way of accessing the application
It makes it much easier to understand how to access the application's data

Some frequently used APIs include:
Google Maps API
Stripe API
Facebook API
Instagram API
Spotify API

Client-Server Communication
Client sends a request to the API server
The API server parses that request
Assuming the request is formatted correctly, the server queries the database for the information or performs the action in the request
The server formats the response and sends it back to the client
The client renders the response according to its implementation

Internet Protocols (IPs)
There are many other internet protocols including:

Transmission Control Protocol (TCP) which is used for data transmission
Hypertext Transmission Protocol (HTTP) which is used for transmitting text and hyperlinks
File Transfer Protocol (FTP) which is used to transfer files between server and client

RESTful APIs
REST stands for Representational State Transfer
Here's a short summary of the REST principles:
Uniform Interface: Every rest architecture must have a standardized way of accessing and processing data resources. This include unique resource identifiers (i.e., unique URLs) and self-descriptive messages in the server response that describe how to process the representation (for instance JSON vs XML) of the data resource.
Stateless: Every client request is self-contained in that the server doesn't need to store any application data in order to make subsequent requests
Client-Server: There must be both a client and server in the architecture
Cacheable & Layered System: Caching and layering increases networking efficiency


============================
Lesson Outline
This section will lay the foundation for the rest of the course. You'll learn more about the HTTP protocol and how to implement an API using the Flask microframework. Here's what we'll cover:

HTTP Basics
Methods
Requests
Responses
Status Codes
Flask Microframework Intro
Creating your first basic endpoints
Testing the response using Curl
Technologies
In this lesson the new technologies you'll use are:
Flask
Curl

****Introduction to HTTP
Features:
Connectionless: When a request is sent, the client opens the connection; once a response is received, the client closes the connection. The client and server only maintain a connection during the response and request. Future responses are made on a new connection.
Stateless: There is no dependency between successive requests.
Not Sessionless: Utilizing headers and cookies, sessions can be created to allow each HTTP request to share the same context.
Media Independent: Any type of data can be sent over HTTP as long as both the client and server know how to handle the data format. In our case, we'll use JSON.

Elements:
Universal Resource Identifiers (URIs): An example URI is http://www.example.com/tasks/term=homework. It has certain components:
Scheme: specifies the protocol used to access the resource, HTTP or HTTPS. In our example http.
Host: specifies the host that holds the resources. In our example www.example.com.
Path: specifies the specific resource being requested. In our example, /tasks.
Query: an optional component, the query string provides information the resource can use for some purpose such as a search parameter. In our example, /term=homework.

*************HTTP Requests
HTTP Requests
HTTP requests are sent from the client to the server to initiate some operation. In addition to the URL, HTTP requests have other elements to specify the requested resource.

Elements:
Method: Defines the operation to be performed
Path: The URL of the resource to be fetched, excluding the scheme and host
HTTP Version
Headers: optional information, success as Accept-Language
Body: optional information, usually for methods such as POST and PATCH, which contain the resource being sent to the server
Request Methods
Different request methods indicate different operations to be performed. It's essential to attend to this to correctly format your requests and properly structure an API.

GET: ONLY retrieves information for the requested resource of the given URI
POST: Send data to the server to create a new resource.
PUT: Replaces all of the representation of the target resource with the request data
PATCH: Partially modifies the representation of the target resource with the request data
DELETE: Removes all of the representation of the resource specified by the URI
OPTIONS: Sends the communication options for the requested resource

*********HTTP Responses
After the request has been received by the server and processed, the server returns an HTTP response message to the client. The response informs the client of the outcome of the requested operation.

Elements:
Status Code & Status Message
HTTP Version
Headers: similar to the request headers, provides information about the response and resource representation. Some common headers include:
Date
Content-Type: the media type of the body of the request
Body: optional data containing the requested resource
Status Codes:
As an API developer, it's important to send the correct status code. As a developer using an API, the status codes—particularly the error codes—are important for understanding what caused an error and how to proceed.

Codes fall into five categories:
1xx Informational
2xx Success
3xx Redirection
4xx Client Error
5xx Server Error
Common Codes:
200: OK
201: Created
304: Not Modified
400: Bad Request
401: Unauthorized
404: Not Found
405: Method Not Allowed
500: Internal Server Error

https://httpstatusdogs.com/


*************Introduction to Flask

Flask Set Up Summary
Starting any Flask app will follow the same general flow for a simple application. The steps below are the same steps as taken in the screencast and can be referenced if you get stuck during the exercise.

Directory & Virtualenv Set Up
Create the project directory mkdir [project_name] and navigate into it
Install flask using pip pip3 install flask
Make the flaskr directory and flaskr/__init__.py file within it
At this point you're ready to start working on your app!

Create_app
In our setup, we will configure the basic Flask app. In these notes, I'll also include how to set up the application to handle specialized configuration.

Basic App
Import your dependencies
from flask import Flask, jsonify
Define the create_app function with parameter test_config initially set to None. Then within the function:
Define the application. Ensure you include the first parameter. __name__is the name of the current Python module.
app = Flask(__name__)
Return the app instance.
return app
Configured Application
The below information is for your reference and related information can be found in the Flask documentation. You are expected to use the basic application set up for this course. However, as you build larger applications that utilize multiple environments and configurations (production, development, testing, etc) this knowledge will be helpful for streamlining your development process.

Import additional dependencies. You'll need to import os in order to access the operating system and file structure import os

Set up your default configuration. When working in development your SECRET_KEY can be hardcoded as shown but for production should come from a secret environment variable. DATABASE is the path for the database file.

app.config.from_mapping(
 SECRET_KEY='dev',
 DATABASE=os.path.join(app.instance_path, 'flaskr.sqlite')
 )
If a config.py file is included in the instance folder, use its values to override the default configuration, for instance the SECRET_KEY. You can also enable a testing configuration if it was passed into the create_app function.

if test_config is None:
 # load the instance config, if it exists, when not testing
 app.config.from_pyfile('config.py', silent=True)
else:
 # load the test config if passed in
 app.config.from_mapping(test_config)
Make the instance path directory. The app will create the database file within that directory so it needs to exist.

try:
 os.makedirs(app.instance_path)
except OSError:
 pass
First Endpoint with JSON
Before you return the app, use the @app.route decorator to create an endpoint to path / and define a function to handle that route.

@app.route('/')
def hello_world():
    return 'Hello, World!'

return app
Instead of returning text, use jsonify to send an object containing the message

 return jsonify({'message':'Hello, World!'})
Run your application
In the command line, you'll run three lines of code. The first two lines tell the terminal where to find your application and to run it in development mode, which allows you to keep it running while it hotloads any modifications. The third actually starts the application. If running your application on Windows

export FLASK_APP=flaskr
export FLASK_ENV=development
flask run


***************Introduction to Curl and Chrome Dev Tools

Curl Syntax
curl -X POST http://www.example.com/tasks/

Curl Options
You can find more options by entering curl --help in the terminal. Some frequently used options are:

-X or --request COMMAND
-d or --data DATA
-F or --form CONTENT
-u or --user USER[:PASSWORD]
-H or --header LINE


================================================== LESSON 3 END POINT and PAYLOAD =========================================

Organize API Endpoints
Handle Cross-Origin Resource Sharing (CORS)
Parse the request path and body
Use POST, PATCH, and DELETE requests in Flask
Handle errors

To accomplish this, we'll need to use a new library, called Flask-CORS


When organizing API endpoints, they should be based on the resources instead of on actions. The request methods will determine what action should be taken at a given URL endpoint. Your entire API's scheme should be consistent, clear and concise. Below are the principles and examples from the video, for your reference:

Principles
Should be intuitive
Organize by resource
Use nouns in the path, not verbs
The method used will determine the operation taken
GOOD:
https://example.com/posts
BAD:
https://example.com/get_posts
Keep a consistent scheme
Plural nouns for collections
Use parameters to specify a specific item
GOOD:
https://example.com/entrees
https://example.com/entrees/5
BAD:
https://example.com/entree
https://example.com/entree_five
Don’t make them too complex or lengthy
No longer than collection/item/collection
GOOD:
https://example.com/entrees/5/reviews
BAD:
https://example.com/entrees/5/customers/4/reviews

Methods & Endpoints Review
The request method used will determine the operation performed for the given resource URI. Though your API documentation should explain exactly what operation is performed and data returned via the response, it should be intuitive for anyone using your API, such as in the example below.

********** CORS

The same-origin policy is a concept of web security that allows scripts in Webpage 1 to access data from Webpage 2 only if they share the same domain. This means that the above error will be raised in the following cases:

Different domains
Different subdomains (example.com and api.example.com)
Different ports (example.com and example.com:1234)
Different protocols (http://example.com and https://example.com)
This is not, however, to say that it is really an error. It is behaving exactly as it should. This policy is there to protect you and your users. For instance, attackers may embed malicious scripts in advertisements. This policy prevents those scripts from successfully making requests to your bank's website as you access the website hosting the advertisement.

If you're sending any requests beyond very simple GET or POST requests, then before your actual request is sent, the browser sends a preflight OPTIONS request to the server. If CORS is not enabled, then the browser will not respond properly and the actual request will not be sent.

In order for the requests to be processed properly, CORS utilizes headers to specify what the server will allow:

Access-Control-Allow-Origin
What client domains can access its resources. For any domain use *
Access-Control-Allow-Credentials
Only if using cookies for authentication - in which case its value must be true
Access-Control-Allow-Methods
List of HTTP request types allowed
Access-Control-Allow-Headers
List of http request header values the server will allow, particularly useful if you use any custom headers

===================

Variable Rules
In our endpoint naming scheme we follow collection/item/collection. In order to handle that variable item. In order to handle that variability in Flask, you add a <variable_name> within the path argument of the `@app.route` decorator, which is then passed to the function as a keyword argument variable_name.

You can also specify the type of the argument by using <converter:variable_name> syntax.

@app.route('/entrees/<int:entree_id>')
def retrieve_entree(entree_id):
    return 'Entree %d' % entree_id

By default, the @app.route decorator answers only get requests. In order to enable more requests types, pass the method parameter to the decorate including a list of string methods.

@app.route('/hello', methods=['GET', 'POST'])
def greeting():
    if request.method == 'POST':
        return create_greeting()
    else:
        return send_greeting()



Pagination in Flask
When handling large collections of data, attempting to serialize and send all of that data to the frontend will slow down the response and rendering to the client.

A common way to handle this issue is to paginate the data you're sending, and send it in chunks instead. Similar to variables discussed above, flask can handle request arguments to get additional request conditions such as page or search terms.


Query Parameters
The below examples show the format of query parameters. When writing query parameters convention dictates that:

A question mark precedes the query parameters
Parameters are in key=value pairs with an equal sign in between the key and value
Sets of parameters are separated by an ampersand
www.example.com/entrees?page=1

www.example.com/entrees?page=1&allergens=peanut 

=================================== ERROR HANDLING ==================

abort(404)

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

In addition, we want to ensure all of our server responses have consistent formatting and that we provide adequate information to the client regarding the error. The `@app.errorhandler` decorator allows you to specify the behavior for expected errors. When using this decorator take into consideration:

passing the status code or Python error as an argument to the decorator
logical naming of the function handler
consistent formatting and messaging of the JSON object response
@app.errorhandler(404)
def not_found(error):
    return jsonify({
        "success": False, 
        "error": 404,
        "message": "Not found"
        }), 404


In this lesson we learned how to extend our functionality using Flask-CORS, so that we could:

Organize API Endpoints
Handle Cross-Origin Resource Sharing (CORS)
Parse the request path and body
Use POST, PATCH, and DELETE requests in Flask
Handle errors
Next up, we'll dive into testing, and how we can use unit tests to make the process of testing much faster.